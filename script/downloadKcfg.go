package main

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"strings"
)

type FileInfo struct {
	Name        string `json:"name"`
	DownloadUrl string `json:"download_url"`
	Repository  string
}

type Repository struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type Item struct {
	Url        string     `json:"url"`
	Repository Repository `json:"repository"`
}

type Response struct {
	Items []Item `json:"items"`
}

var githubToken string
var allInfos []FileInfo

func main() {
	token, err := ioutil.ReadFile("token.secret")
	if err != nil {
		log.Fatal(err)
	}
	githubToken = string(token)

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	// curl --location --request GET 'https://api.github.com/search/code?q=filename%3A*.kcfg+user%3AKDE+language%3AXML+language%3AXML+language%3AXML+language%3AXML&type=Code&ref=advsearch&l=XML&l=XML'
	//q=.kcfg+repo%3AKDE%2Fdolphin+language%3AXML+language%3AXML&type=Code&ref=advsearch&l=XML&l=XML&per_page=100
	//q=kcfg+repo%3AKDE%2Fdiscover+language%3AXML&type=Code&ref=advsearch&l=XML&l=
	//q=kcfg+xmlns+language%3AXML+user%3Akde+language%3AXML&type=Code
	r, closer := download("https://api.github.com/search/code?q=kcfg+xmlns+language%3AXML+user%3Akde+language%3AXML&type=Code&per_page=100")
	defer closer()

	dec := json.NewDecoder(r)
	var doc Response
	if err := dec.Decode(&doc); err != nil {
		log.Fatal(err)
	}

	for _, item := range doc.Items {
		fmt.Printf("Start with: %s\n", item.Repository.Name)
		downloadFileInfo(item)
		fmt.Printf("Finish with: %s\n", item.Repository.Name)
	}

	b, err := json.Marshal(allInfos)
	if err != nil {
		log.Fatal(err)
	}

	err = ioutil.WriteFile("src-new.json", b, 0644)
	if err != nil {
		log.Fatal(err)
	}
}

func downloadFileInfo(item Item) {
	r, closer := download(item.Url)
	defer closer()

	decoder := json.NewDecoder(r)
	var info FileInfo
	if err := decoder.Decode(&info); err != nil {
		log.Fatal(err)
	}
	info.Repository = item.Repository.Name

	allInfos = append(allInfos, info)
	if strings.Contains(info.DownloadUrl, "main.xml") || strings.Contains(info.DownloadUrl, "config.kcfg") || strings.Contains(info.DownloadUrl, "kcfg.xsd") {
		log.Printf("Skip %s: %s", info.Repository, info.DownloadUrl)
		return
	}

	file, closeFileResponse := download(info.DownloadUrl)
	defer closeFileResponse()

	b, err := ioutil.ReadAll(file)

	// write the whole body at once
	err = ioutil.WriteFile(fmt.Sprintf("kcfg/%s", info.Name), b, 0644)
	if err != nil {
		panic(err)
	}
	fmt.Println(info.Name)
}

func download(url string) (io.ReadCloser, func()) {
	c := http.Client{}
	r, _ := http.NewRequest(http.MethodGet, url, nil)
	r.Header.Add("Authorization", "Basic "+basicAuth("dominikstraessle", githubToken))
	resp, err := c.Do(r)
	if err != nil {
		log.Fatalf("Failed to get %s, %v", url, err)
	}

	return resp.Body, func() {
		err = resp.Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}
}

func basicAuth(username, password string) string {
	auth := username + ":" + password
	return base64.StdEncoding.EncodeToString([]byte(auth))
}
