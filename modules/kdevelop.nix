{ config, lib, ... }:
with lib;
let cfg = config.programs.plasma;
in {
  options.programs.plasma.kdevelop = { 
    "Background Parser" = with types; mkOption {
      type = submodule {
        options = { 
          Delay = mkOption {
            type = nullOr (either str int);
            default = 500;
            description = ''
              

              Type: Int
            '';
          };
          Enabled = mkOption {
            type = nullOr (either str bool);
            default = true;
            description = ''
              

              Type: Bool
            '';
          };
          "Number of Threads" = mkOption {
            type = nullOr (either str int);
            default = 2;
            description = ''
              

              Type: Int
            '';
          };
        };
      };
      default = {};
      description = "Background Parser";
    };    
    "CMakeBuilder" = with types; mkOption {
      type = submodule {
        options = { 
          cmakeExe = mkOption {
            type = nullOr str;
            default = "QUrl::fromLocalFile(CMake::findExecutable())";
            defaultText = "Code: true";
            description = ''
              

              Type: Url
            '';
          };
          generator = mkOption {
            type = nullOr (either str int);
            default = 0;
            description = ''
              

              Type: Int
            '';
          };
        };
      };
      default = {};
      description = "CMakeBuilder";
    };    
    "Clang Settings" = with types; mkOption {
      type = submodule {
        options = { 
          forwardDeclare = mkOption {
            type = nullOr (either str bool);
            default = true;
            description = ''
              

              Type: Bool
            '';
          };
          lookAhead = mkOption {
            type = nullOr (either str bool);
            default = false;
            description = ''
              

              Type: Bool
            '';
          };
          macros = mkOption {
            type = nullOr (either str bool);
            default = true;
            description = ''
              

              Type: Bool
            '';
          };
        };
      };
      default = {};
      description = "Clang Settings";
    };    
    "Language Support" = with types; mkOption {
      type = submodule {
        options = { 
          "Automatic Invocation" = mkOption {
            type = nullOr (either str bool);
            default = true;
            description = ''
              

              Type: Bool
            '';
          };
          boldDeclarations = mkOption {
            type = nullOr (either str bool);
            default = true;
            description = ''
              

              Type: Bool
            '';
          };
          completionDetail = mkOption {
            type = nullOr (either str (enum [ 
              "Minimal"
              "MinimalWhenAutomatic"
              "AlwaysFull"
            ]));
            default = "";
            description = ''
              

              Type: Enum
              Choices: 
                - Minimal
                - MinimalWhenAutomatic
                - AlwaysFull
            '';
          };
          globalColorSource = mkOption {
            type = nullOr (either str (enum [ 
              "AutoGenerated"
              "FromTheme"
            ]));
            default = "";
            description = ''
              

              Type: Enum
              Choices: 
                - AutoGenerated
                - FromTheme
            '';
          };
          globalColorization = mkOption {
            type = nullOr (either str int);
            default = 255;
            description = ''
              

              Type: Int
            '';
          };
          highlightProblematicLines = mkOption {
            type = nullOr (either str bool);
            default = false;
            description = ''
              

              Type: Bool
            '';
          };
          highlightSemanticProblems = mkOption {
            type = nullOr (either str bool);
            default = true;
            description = ''
              

              Type: Bool
            '';
          };
          localColorization = mkOption {
            type = nullOr (either str int);
            default = 170;
            description = ''
              

              Type: Int
            '';
          };
          minFilesForSimplifiedParsing = mkOption {
            type = nullOr (either str int);
            default = 100000;
            description = ''
              

              Type: Int
            '';
          };
          problemInlineNotesLevel = mkOption {
            type = nullOr (either str (enum [ 
            ]));
            default = "KDevelop::ICompletionSettings::WarningsAndErrorsProblemInlineNotesLevel";
            description = ''
              

              Type: Enum
            '';
          };
          showMultiLineSelectionInformation = mkOption {
            type = nullOr (either str bool);
            default = false;
            description = ''
              

              Type: Bool
            '';
          };
          todoMarkerWords = mkOption {
            type = nullOr str;
            default = "TODO FIXME";
            description = ''
              

              Type: String
            '';
          };
        };
      };
      default = {};
      description = "Language Support";
    };    
    "MakeBuilder" = with types; mkOption {
      type = submodule {
        options = { 
          "Abort on First Error" = mkOption {
            type = nullOr (either str bool);
            default = true;
            description = ''
              

              Type: Bool
            '';
          };
          "Additional Options" = mkOption {
            type = nullOr str;
            default = "";
            description = ''
              

              Type: String
            '';
          };
          "Default Make Environment Profile" = mkOption {
            type = nullOr str;
            default = "default";
            description = ''
              

              Type: String
            '';
          };
          "Default Target" = mkOption {
            type = nullOr str;
            default = "";
            description = ''
              

              Type: String
            '';
          };
          "Display Only" = mkOption {
            type = nullOr (either str bool);
            default = false;
            description = ''
              

              Type: Bool
            '';
          };
          "Install As Root" = mkOption {
            type = nullOr (either str bool);
            default = false;
            description = ''
              

              Type: Bool
            '';
          };
          "Make Binary" = mkOption {
            type = nullOr str;
            default = "MakeBuilderPreferences::standardMakeExecutable()";
            defaultText = "Code: true";
            description = ''
              

              Type: String
            '';
          };
          "Number Of Jobs" = mkOption {
            type = nullOr (either str int);
            default = 1;
            description = ''
              

              Type: UInt
            '';
          };
          "Override Number Of Jobs" = mkOption {
            type = nullOr (either str bool);
            default = false;
            description = ''
              

              Type: Bool
            '';
          };
          "Su Command" = mkOption {
            type = nullOr str;
            default = "kdesu -t";
            description = ''
              

              Type: String
            '';
          };
        };
      };
      default = {};
      description = "MakeBuilder";
    };    
    "PHP Documentation" = with types; mkOption {
      type = submodule {
        options = { 
          phpDocLocation = mkOption {
            type = nullOr str;
            default = "https://php.net";
            description = ''
              Specifies the location of the PHP documentation to use.

              Type: Url
            '';
          };
        };
      };
      default = {};
      description = "PHP Documentation";
    };    
  };
  config = mkIf cfg.enable {
    programs.plasma.files."kdeveloprc" = cfg.kdevelop;
  };
}
